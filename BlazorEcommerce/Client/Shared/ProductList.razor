@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
	<span>@ProductService.message</span>
}
else
{
	<ul class="list-unstyled">
		@foreach (var p in ProductService.Products)
		{
			<li class="media my-3">
				<div class="media-img-wrapper mr-2">
					<a href="/product/@p.Id">
						<img class="media-img" src="@p.ImageUrl" alt="@p.Title" />
					</a>
				</div>
				<div class="media-body">
					<a href="/product/@p.Id">
						<h4 class="mb-0">@p.Title</h4>
					</a>
					<p>@p.Description</p>
					<h5 class="price">@GetPriceText(p)</h5>					
				</div>
			</li>
		}
	</ul>
}
@code {
	protected override void OnInitialized()
	{
		ProductService.ProductsChanged += StateHasChanged;		
	}

	public void Dispose()
	{
		ProductService.ProductsChanged -= StateHasChanged;
	}

	private string GetPriceText(Product product)
	{
		var variants = product.Variants;
		if (variants.Count == 0)
		{
			return string.Empty;
		}
		else if (variants.Count == 1)
		{
			return $"${variants[0].Price}";
		}
		decimal minPrice = variants.Min(v => v.Price);
		return $"Starting at ${minPrice}";
	}
}